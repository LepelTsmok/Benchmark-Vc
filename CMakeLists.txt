cmake_minimum_required(VERSION 3.0)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
   message(FATAL_ERROR "You don't want to configure in the source directory!")
endif()

project(BenchmarkVc)
find_package(Vc REQUIRED)
find_library(GGBENCH_LIBRARIES benchmark)
find_path(GGBENCH_INCLUDE_DIR benchmark)
if(NOT GGBENCH_LIBRARIES OR NOT GGBENCH_INCLUDE_DIR)
   message(FATAL_ERROR "Required Google Benchmark library not found (https://github.com/google/benchmark)")
endif()

add_executable(benchmarkMemoryLayout memorylayout.cpp)
target_include_directories(benchmarkMemoryLayout PRIVATE "${Vc_INCLUDE_DIR};${GGBENCH_INCLUDE_DIR}")
target_compile_options(benchmarkMemoryLayout PRIVATE "-std=c++11;${Vc_COMPILE_FLAGS};${Vc_ARCHITECTURE_FLAGS}")
set_target_properties(benchmarkMemoryLayout PROPERTIES LINK_FLAGS -pthread)
target_link_libraries(benchmarkMemoryLayout ${Vc_LIBRARIES} ${GGBENCH_LIBRARIES})

add_executable(benchmarkAddition addition.cpp)
target_include_directories(benchmarkAddition PRIVATE "${Vc_INCLUDE_DIR};${GGBENCH_INCLUDE_DIR}")
target_compile_options(benchmarkAddition PRIVATE "-std=c++11;${Vc_COMPILE_FLAGS};${Vc_ARCHITECTURE_FLAGS}")
set_target_properties(benchmarkAddition PROPERTIES LINK_FLAGS -pthread)
target_link_libraries(benchmarkAddition ${Vc_LIBRARIES} ${GGBENCH_LIBRARIES})
